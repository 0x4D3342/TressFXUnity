// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SortFragments

// Linked list structure
struct PPLL_STRUCT
{
    uint	TangentAndCoverage;	
    float	depth;
    uint    uNext;
    float    ammountLight;
};

struct KBUFFER_STRUCT
{
	float depth;
	float3 tangent;
	float coverage;
	float ammountLight;
};

// Linked List resources
RWTexture2D<uint> LinkedListHead;
RWStructuredBuffer<struct PPLL_STRUCT> LinkedList;

// Screen information
float4 screenSize;
float4x4 InvVPMatrix;
float4 g_vEye;
float4 g_MatBaseColor;

// Final result
RWTexture2D<float4> Result;

#define THREAD_GROUP_SIZE 8
#define NULLPOINTER 0xffffffff
#define MAX_FRAGMENTS 256
#define KBUFFER_SIZE 8
#define PI 3.1415926
// #define COLORDEBUG


//--------------------------------------------------------------------------------------
// ComputeHairShading
//
// Hair shading using dual highlight approach and Kajiya lighting model
// dual highlight: marschner 03 
// kajiya model: kajiya 84
//--------------------------------------------------------------------------------------
float3 ComputeHairShading(float3 iPos, float3 iTangent, float amountLight)
{
    float3 baseColor = g_MatBaseColor.xyz;
    float rand_value = 1;
    
    /*if(abs(iTex.x) + abs(iTex.y) >1e-5) // if texcoord is available, use texture map
        rand_value = g_txNoise.SampleLevel(g_samLinearWrap, iTex.xy, 0).x;*/
    
    // define baseColor and Ka Kd Ks coefficient for hair
 	float Kd = 0.4f; // g_MatKValue.y;
    float Ka = 0; // g_MatKValue.x;
	float Ks1 = 0.399; // g_MatKValue.z;
	float Ex1 = 80; // g_MatKValue.w;
	float Ks2 = 0.5; // g_fHairKs2;
	float Ex2 = 8; // g_fHairEx2;

    float3 lightPos = float3(100, 200, -100); // g_PointLightPos.xyz;
    float3 vLightDir = normalize(lightPos - iPos.xyz);
    float3 vEyeDir = normalize(g_vEye.xyz - iPos.xyz);
    float3 tangent = normalize(iTangent);

    // in Kajiya's model: diffuse component: sin(t, l)
    float cosTL = (dot(tangent, vLightDir));
    float sinTL = sqrt(1 - cosTL*cosTL);
    float diffuse = sinTL; // here sinTL is apparently larger than 0

    float alpha = (rand_value * 10) * PI/180; // tiled angle (5-10 dgree)

    // in Kajiya's model: specular component: cos(t, rl) * cos(t, e) + sin(t, rl)sin(t, e)
    float cosTRL = -cosTL;
    float sinTRL = sinTL;
    float cosTE = (dot(tangent, vEyeDir));
    float sinTE = sqrt(1- cosTE*cosTE);

    // primary highlight: reflected direction shift towards root (2 * Alpha)
    float cosTRL_root = cosTRL * cos(2 * alpha) - sinTRL * sin(2 * alpha);
    float sinTRL_root = sqrt(1 - cosTRL_root * cosTRL_root);
    float specular_root = max(0, cosTRL_root * cosTE + sinTRL_root * sinTE);

    // secondary highlight: reflected direction shifted toward tip (3*Alpha)
    float cosTRL_tip = cosTRL*cos(-3*alpha) - sinTRL*sin(-3*alpha);
    float sinTRL_tip = sqrt(1 - cosTRL_tip * cosTRL_tip);
    float specular_tip = max(0, cosTRL_tip * cosTE + sinTRL_tip * sinTE);

    float3 vColor = Ka * /*g_AmbientLightColor.xyz **/ baseColor + // ambient
                    amountLight * float3(1,1,1) /*g_PointLightColor.xyz*/ * (
                    Kd * diffuse * baseColor + // diffuse
                    Ks1 * pow(specular_root, Ex1)  + // primary hightlight r
                    Ks2 * pow(specular_tip, Ex2) * baseColor); // secondary highlight rtr 

   return vColor;
}

//--------------------------------------------------------------------------------------
// SimpleHairShading
//
// Low quality, but faster hair shading
//--------------------------------------------------------------------------------------
float3 SimpleHairShading(float3 iPos, float3 iTangent, float amountLight)
{
    
    float3 baseColor = float3(0.647, 0.419, 0.274); // g_MatBaseColor.xyz;
 	float Kd = 0.4f; // g_MatKValue.y;
   
#ifdef SUPERSIMPLESHADING
	float3 vColor = amountLight * Kd * baseColor;
#else
    // define baseColor and Ka Kd Ks coefficient for hair
    float Ka = 0; // g_MatKValue.x;
	float Ks1 = 0.399; // g_MatKValue.z;
	float Ex1 = 80; // g_MatKValue.w;
	float Ks2 = 0.5; // g_fHairKs2;
	float Ex2 = 8; // g_fHairEx2;

    float3 lightPos = float3(100, 200, -100); // g_PointLightPos.xyz;
    float3 vLightDir = normalize(lightPos - iPos.xyz);
    float3 tangent = normalize(iTangent);

    // in Kajiya's model: diffuse component: sin(t, l)
    float cosTL = (dot(tangent, vLightDir));
    float sinTL = sqrt(1 - cosTL*cosTL);
    float diffuse = sinTL; // here sinTL is apparently larger than 0

    float3 vColor = Ka * /*g_AmbientLightColor.xyz **/ baseColor +							// ambient
                    amountLight * float3(1,1,1) /*g_PointLightColor.xyz*/ * (Kd * diffuse * baseColor);	// diffuse
#endif

    return vColor;
}

// HELPER FUNCTIONS
uint PackFloat4IntoUint(float4 vValue)
{
    return ( (uint(vValue.x*255)& 0xFFUL) << 24 ) | ( (uint(vValue.y*255)& 0xFFUL) << 16 ) | ( (uint(vValue.z*255)& 0xFFUL) << 8) | (uint(vValue.w * 255)& 0xFFUL);
}

float4 UnpackUintIntoFloat4(uint uValue)
{
    return float4( ( (uValue & 0xFF000000)>>24 ) / 255.0, ( (uValue & 0x00FF0000)>>16 ) / 255.0, ( (uValue & 0x0000FF00)>>8 ) / 255.0, ( (uValue & 0x000000FF) ) / 255.0);
}

uint PackTangentAndCoverage(float3 tangent, float coverage)
{
    return PackFloat4IntoUint( float4(tangent.xyz*0.5 + 0.5, coverage) );
}

float3 GetTangent(uint packedTangent)
{
    return 2.0 * UnpackUintIntoFloat4(packedTangent).xyz - 1.0;
}

float GetCoverage(uint packedCoverage)
{
    return UnpackUintIntoFloat4(packedCoverage).w;
}

float3 ComputeWorldPosition(float3 screenPos)
{
	// Transform pixel space to clipping space
	screenPos.x = 2.0f*screenPos.x * (1.0f/screenSize.x) - 1.0f;
	screenPos.y =  1.0f - 2.0f * screenPos.y * (1.0f / screenSize.y);
	
	// Do inverse VP multiplication
	float4 worldPos = mul(float4(screenPos, 1), InvVPMatrix);
	
	// Calculate final world position
	return worldPos.xyz * worldPos.w;
}

[numthreads(THREAD_GROUP_SIZE,THREAD_GROUP_SIZE,1)]
void SortFragments (uint3 id : SV_DispatchThreadID)
{
	// Bounds check
	if (id.x > (uint)screenSize.x || id.y > (uint)screenSize.y)
		return;
	
	// Get first index
	uint pointer = LinkedListHead[id.xy];
		
	// NULLPOINTER check
	if (pointer == NULLPOINTER)
	{
		Result[id.xy] = float4(0,0,0,0);
		return;
	}
	
	// Needed variables
	#ifdef COLORDEBUG
		uint nNumFragments = 0;
	#endif
	
	KBUFFER_STRUCT kBuffer[KBUFFER_SIZE];
	float4 fcolor = float4(0,0,0,1);
	
	// Counters
	uint i = 0;
	uint j = 0;
	
	// Initialize kbuffer
	for (i = 0; i < KBUFFER_SIZE; i++)
	{
		kBuffer[i].depth = 1000000.0f;
	}
	
	// Will hold the actual count of elements in the kbuffer
	uint kBufferFragments = 0;
	
	// Get the first k fragments
	for (i = 0; i < KBUFFER_SIZE; i++)
	{
		if (pointer != NULLPOINTER)
		{
			kBuffer[i].depth = LinkedList[pointer].depth;
			kBuffer[i].tangent = GetTangent(LinkedList[pointer].TangentAndCoverage);
			kBuffer[i].coverage = GetCoverage(LinkedList[pointer].TangentAndCoverage);
			kBuffer[i].ammountLight = LinkedList[pointer].ammountLight;
			
			pointer = LinkedList[pointer].uNext;
			kBufferFragments++;
		}
		else
		{
			break;
		}
	}
	
	// If there are no more fragments, dont check for others..
	if (pointer != NULLPOINTER)
	{
		// Get the rest of the fragments on this pixel
		for (i = 0; i < MAX_FRAGMENTS; i++)
		{
			if (pointer != NULLPOINTER)
			{
				float maxDepth = 0;
				uint maxDepthIndex = 0;
				
				// Find the furthest kbuffer fragment
				for (j = 0; j < KBUFFER_SIZE; j++)
				{
					if (maxDepth < kBuffer[j].depth)
					{
						maxDepth = kBuffer[j].depth;
						maxDepthIndex = j;
					}
				}
				
				float depth = LinkedList[pointer].depth;
				float3 tangent = GetTangent(LinkedList[pointer].TangentAndCoverage);
				float coverage = GetCoverage(LinkedList[pointer].TangentAndCoverage);
				float ammountLight = LinkedList[pointer].ammountLight;
				
				// Exchange
				if (maxDepth > LinkedList[pointer].depth)
				{
					depth = kBuffer[maxDepthIndex].depth;
					tangent = kBuffer[maxDepthIndex].tangent;
					coverage = kBuffer[maxDepthIndex].coverage;
					ammountLight = kBuffer[maxDepthIndex].ammountLight;
					
					kBuffer[maxDepthIndex].depth = depth;
					kBuffer[maxDepthIndex].tangent = tangent;
					kBuffer[maxDepthIndex].coverage = coverage;
					kBuffer[maxDepthIndex].ammountLight = ammountLight;
				}
				
				// Do out of order blending and simple shading for fragments which dont make it into the KBuffer
				float3 worldPos = ComputeWorldPosition(float3(id.xy, depth));
				
				float4 fragmentColor = float4(SimpleHairShading(worldPos.xyz, tangent, ammountLight), 1);
				fcolor.xyz = mad(-fcolor.xyz, fragmentColor.w, fcolor.xyz) + fragmentColor.xyz * fragmentColor.w;
				
				#ifdef COLORDEBUG
					nNumFragments++;
				#endif
				
				pointer = LinkedList[pointer].uNext;
			}
			else
			{
				break;
			}
		}
	}
	
	#ifdef COLORDEBUG
    float3 fcolor = float3(0,1,0);
    if (nNumFragments>32) fcolor.xyz = float3(1,1,0);
    if (nNumFragments>64) fcolor.xyz = float3(1,0.5,0);
    if (nNumFragments>128) fcolor.xyz = float3(1,0,0);
    
	Result[id.xy] = float4(fcolor, 1);
	#else
	
	float4 fragmentColor = float4(0,0,0,1);
	
	// Go through kbuffer in back-to-front order
	for (i = 0; i < kBufferFragments; i++)
	{
		float maxDepth = 0;
		uint maxDepthIndex = 0;
		
		// Find the furthest kbuffer fragment
		for (j = 0; j < kBufferFragments; j++)
		{
			if (maxDepth < kBuffer[j].depth)
			{
				maxDepth = kBuffer[j].depth;
				maxDepthIndex = j;
			}
		}
		
		// Compute world position
		float3 worldPos = ComputeWorldPosition(float3(id.xy, kBuffer[maxDepthIndex].depth));
		
		// Compute hair shading for current fragment and set coverage as alpha
		fragmentColor.xyz = ComputeHairShading(worldPos.xyz, kBuffer[maxDepthIndex].tangent, kBuffer[maxDepthIndex].ammountLight);
		fragmentColor.w = 1; // kBuffer[maxDepthIndex].coverage;
		
		// Blend fragments together
        fcolor.xyz = mad(-fcolor.xyz, fragmentColor.w, fcolor.xyz) + fragmentColor.xyz * fragmentColor.w;
		// fcolor.w = mad(-fcolor.w, fragmentColor.w, fcolor.w);
		
		// Take this fragment out of the search
		kBuffer[maxDepthIndex].depth = 0;
	}
	
	Result[id.xy] = fcolor;
	
	#endif
}

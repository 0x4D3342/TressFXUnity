//--------------------------------------------------------------------------------------
// File: HairSimulation.compute
//
// Physics simulation of hair using compute shaders 
// Written by ADVANCED MICRO DEVICES ported to unity and modified by Kenneth Ellersdorfer (KennuX) 
//
// Copyright 2014 ADVANCED MICRO DEVICES, INC.  All Rights Reserved.
//
// AMD is granting you permission to use this software and documentation (if
// any) (collectively, the "Materials") pursuant to the terms and conditions
// of the Software License Agreement included with the Materials.  If you do
// not have a copy of the Software License Agreement, contact your AMD
// representative for a copy.
// You agree that you will not reverse engineer or decompile the Materials,
// in whole or in part, except as allowed by applicable law.
//
// WARRANTY DISCLAIMER: THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND.  AMD DISCLAIMS ALL WARRANTIES, EXPRESS, IMPLIED, OR STATUTORY,
// INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE, NON-INFRINGEMENT, THAT THE SOFTWARE
// WILL RUN UNINTERRUPTED OR ERROR-FREE OR WARRANTIES ARISING FROM CUSTOM OF
// TRADE OR COURSE OF USAGE.  THE ENTIRE RISK ASSOCIATED WITH THE USE OF THE
// SOFTWARE IS ASSUMED BY YOU.
// Some jurisdictions do not allow the exclusion of implied warranties, so
// the above exclusion may not apply to You. 
// 
// LIMITATION OF LIABILITY AND INDEMNIFICATION:  AMD AND ITS LICENSORS WILL
// NOT, UNDER ANY CIRCUMSTANCES BE LIABLE TO YOU FOR ANY PUNITIVE, DIRECT,
// INCIDENTAL, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES ARISING FROM USE OF
// THE SOFTWARE OR THIS AGREEMENT EVEN IF AMD AND ITS LICENSORS HAVE BEEN
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.  
// In no event shall AMD's total liability to You for all damages, losses,
// and causes of action (whether in contract, tort (including negligence) or
// otherwise) exceed the amount of $100 USD.  You agree to defend, indemnify
// and hold harmless AMD and its licensors, and any of their directors,
// officers, employees, affiliates or agents from and against any and all
// loss, damage, liability and other expenses (including reasonable attorneys'
// fees), resulting from Your use of the Software or violation of the terms and
// conditions of this Agreement.  
//
// U.S. GOVERNMENT RESTRICTED RIGHTS: The Materials are provided with "RESTRICTED
// RIGHTS." Use, duplication, or disclosure by the Government is subject to the
// restrictions as set forth in FAR 52.227-14 and DFAR252.227-7013, et seq., or
// its successor.  Use of the Materials by the Government constitutes
// acknowledgement of AMD's proprietary rights in them.
// 
// EXPORT RESTRICTIONS: The Materials may be subject to export restrictions as
// stated in the Software License Agreement.
//
//--------------------------------------------------------------------------------------

#pragma kernel SkipSimulateHair
#pragma kernel IntegrationAndGlobalShapeConstraints
#pragma kernel LocalShapeConstraints
#pragma kernel LengthConstraintsAndWind
#pragma kernel CollisionAndTangents

// --------> Configuration values <--------

float g_TimeStep;
float GravityMagnitude;
uint NumStrands;
uint NumLengthConstraintIterations;
float4 g_Wind;
float4 g_Wind1;
float4 g_Wind2;
float4 g_Wind3;

// --------> Configuration end <--------


struct TressFXHairConfig
{
	float globalStiffness;
	float globalStiffnessMatchingRange;
	float localStiffness;
	float damping;
};

struct TressFXSphereCollider
{
	float3 centerPos;
	float radius;
	float radius2;
};

RWStructuredBuffer<float4> g_HairVertexPositions; 
RWStructuredBuffer<float4> g_HairVertexPositionsPrev; 
RWStructuredBuffer<float4> g_HairVertexTangents; 
RWStructuredBuffer<float4> g_InitialHairPositions;
RWStructuredBuffer<float4> g_GlobalRotations; 
RWStructuredBuffer<float4> g_LocalRotations; 

RWStructuredBuffer<int>		g_HairVerticesOffsetsSRV; 
RWStructuredBuffer<float>	g_HairRestLengthSRV;
RWStructuredBuffer<int>		g_HairStrandType; 
RWStructuredBuffer<float3>	g_HairRefVecsInLocalFrame; 
RWStructuredBuffer<struct TressFXHairConfig> g_Config;
RWStructuredBuffer<struct TressFXSphereCollider> g_Colliders;

float g_ColliderCount;
float4x4 g_ModelTransformForHead;
float4x4 g_ModelPrevInvTransformForHead;
float4 g_ModelRotateForHead; // quaternion

#define THREAD_GROUP_SIZE 64

groupshared float4 sharedPos[THREAD_GROUP_SIZE];
groupshared float  sharedLength[THREAD_GROUP_SIZE];

// -------------------------> FUNCTIONS <---------------------------

void UpdateFinalVertexPositions(float4 oldPosition, float4 newPosition, uint globalVertexIndex, uint localVertexIndex, uint numVerticesInTheStrand)
{ 
	if ( localVertexIndex < numVerticesInTheStrand )
	{
		g_HairVertexPositionsPrev[globalVertexIndex] = oldPosition;        
		g_HairVertexPositions[globalVertexIndex] = newPosition;
	}
}

//--------------------------------------------------------------------------------------
// 
//	Integrate
//
//  Uses Verlet integration to calculate the new position for the current time step
//
//--------------------------------------------------------------------------------------
float4 Integrate(float4 curPosition, float4 oldPosition, float4 initialPos, float4 force, uint globalVertexIndex, uint localVertexIndex, uint numVerticesInTheStrand, float dampingCoeff = 1.0f)
{  
    float4 outputPos = curPosition;

    force.xyz += GravityMagnitude * float3(0, -1.0f, 0);
    outputPos.xyz = curPosition.xyz + (1.0 - dampingCoeff)*(curPosition.xyz - oldPosition.xyz) + force.xyz*g_TimeStep*g_TimeStep; 
    
    return outputPos;  
}

bool IsMovable(float4 particle)
{
    if ( particle.w > 0 )
        return true;
    return false;      
}

float2 ConstraintMultiplier(float4 particle0, float4 particle1)
{
    if (IsMovable(particle0)) 
    {
        if (IsMovable(particle1))
            return float2(0.5, 0.5);
        else
            return float2(1, 0);
    }
    else 
    {
        if (IsMovable(particle1))
            return float2(0, 1);
        else
            return float2(0, 0);
    }    
}

float4 MakeQuaternion(float angle_radian, float3 axis)
{
    // create quaternion using angle and rotation axis
    float4 quaternion;
    float halfAngle = 0.5f * angle_radian;
    float sinHalf = sin(halfAngle);

    quaternion.w = cos(halfAngle);
    quaternion.xyz = sinHalf * axis.xyz;

    return quaternion;
}

float4 InverseQuaternion(float4 q)
{
    float lengthSqr = q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w;

    if ( lengthSqr < 0.001 )
        return float4(0, 0, 0, 1.0f);

    q.x = -q.x / lengthSqr;
    q.y = -q.y / lengthSqr;
    q.z = -q.z / lengthSqr;
    q.w = q.w / lengthSqr;

    return q;
}

float3 MultQuaternionAndVector(float4 q, float3 v)
{
    float3 uv, uuv;
    float3 qvec = float3(q.x, q.y, q.z);
    uv = cross(qvec, v);
    uuv = cross(qvec, uv);
    uv *= (2.0f * q.w);
    uuv *= 2.0f;

    return v + uv + uuv;
}

float4 MultQuaternionAndQuaternion(float4 qA, float4 qB)
{
    float4 q;

    q.w = qA.w * qB.w - qA.x * qB.x - qA.y * qB.y - qA.z * qB.z;
    q.x = qA.w * qB.x + qA.x * qB.w + qA.y * qB.z - qA.z * qB.y;
    q.y = qA.w * qB.y + qA.y * qB.w + qA.z * qB.x - qA.x * qB.z;
    q.z = qA.w * qB.z + qA.z * qB.w + qA.x * qB.y - qA.y * qB.x;
    
    return q;
}

void ApplyDistanceConstraint(inout float4 pos0, inout float4 pos1, float targetDistance, float stiffness = 1.0)
{
    float3 delta = pos1.xyz - pos0.xyz;
    float distance = max(length(delta), 1e-7);
    float stretching = 1 - targetDistance / distance;
    delta = stretching * delta;
    float2 multiplier = ConstraintMultiplier(pos0, pos1);
    
    pos0.xyz += multiplier[0] * delta * stiffness;
    pos1.xyz -= multiplier[1] * delta * stiffness;
}


struct CollisionCapsule
{
	float4 p1; // xyz = position 1 of capsule, w = radius
	float4 p2; // xyz = position 2 of capsule, w = radius * radius
};

//--------------------------------------------------------------------------------------
// 
//	CapsuleCollision
//
//  Moves the position based on collision with capsule
//
//--------------------------------------------------------------------------------------
float3 CapsuleCollision(float4 curPosition, float4 oldPosition, CollisionCapsule cc, float friction = 0.4f)
{
	float3 newPos = curPosition.xyz;
	const float radius = cc.p1.w;
	const float radius2 = cc.p2.w;
		
	if ( !IsMovable(curPosition) )
		return newPos;
			
	float3 segment = cc.p2.xyz - cc.p1.xyz;
	float3 delta1 = curPosition.xyz - cc.p1.xyz;
	float3 delta2 = cc.p2.xyz - curPosition.xyz;
		
	float dist1 = dot(delta1, segment);
	float dist2 = dot(delta2, segment);
		
	// colliding with sphere 1
	if ( dist1 < 0.f )
	{
		if ( dot(delta1, delta1) < radius2 )
		{
			float3 n = normalize(delta1);
			newPos = radius * n + cc.p1.xyz;
		}
		return newPos;
	}
		
	// colliding with sphere 2
	if ( dist2 < 0.f )
	{
		if ( dot(delta2, delta2) < radius2 )
		{
			float3 n = normalize(-delta2);
			newPos = radius * n + cc.p2.xyz;
		}
		return newPos;
	}
		
	// colliding with middle cylinder
	float3 x = (dist1 * cc.p2.xyz + dist2 * cc.p1.xyz) / (dist1 + dist2);
	float3 delta = curPosition.xyz - x;
		
	if ( dot(delta, delta) < radius2 )
	{
		float3 n = normalize(delta);
		float3 vec = curPosition.xyz - oldPosition.xyz;
		float3 segN = normalize(segment);
		float3 vecTangent = dot(vec, segN) * segN;
		float3 vecNormal = vec - vecTangent;
		newPos.xyz = oldPosition.xyz + friction * vecTangent + (vecNormal + radius * n - delta);
	}
	return newPos;
}


// -----------------------------> KERNELS <-------------------------
// Skip hair simulation kernel
[numthreads(1,1,1)]
void SkipSimulateHair (uint3 dtid : SV_DispatchThreadID)
{
	float4 oldPosition = g_HairVertexPositionsPrev[dtid.x];
	float4 newPosition = g_HairVertexPositions[dtid.x];
	
	oldPosition.xyz = mul(float4( oldPosition.xyz, 1), g_ModelPrevInvTransformForHead).xyz;
	oldPosition.xyz = mul(float4( oldPosition.xyz, 1), g_ModelTransformForHead).xyz;
	
	newPosition.xyz = mul(float4( newPosition.xyz, 1), g_ModelPrevInvTransformForHead).xyz;
	newPosition.xyz = mul(float4( newPosition.xyz, 1), g_ModelTransformForHead).xyz;
	
	UpdateFinalVertexPositions(oldPosition, newPosition, dtid.x, 0, 2);
}

//--------------------------------------------------------------------------------------
// 
//	IntegrationAndGlobalShapeConstraints
//
//  Compute shader to simulate the gravitational force with integration and to maintain the
//  global shape constraints.
//
// One thread computes one vertex.
//
//--------------------------------------------------------------------------------------
[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void IntegrationAndGlobalShapeConstraints(uint GIndex : SV_GroupIndex,
                  uint3 GId : SV_GroupID,
                  uint3 DTid : SV_DispatchThreadID)
{
    uint offset = 0;
    uint strandType = 0;

	uint globalStrandIndex = 0;
	uint localVertexIndex = 0; 
	uint indexForSharedMem = GIndex;
	uint numOfStrandsPerThreadGroup = 2;
	uint maxPossibleVertsInStrand = (THREAD_GROUP_SIZE / numOfStrandsPerThreadGroup);

	if ( GIndex < maxPossibleVertsInStrand )
	{
		globalStrandIndex = 2 * GId.x;
		localVertexIndex = GIndex;
	}
	else
	{
		globalStrandIndex = 2 * GId.x + 1;
		localVertexIndex = GIndex - maxPossibleVertsInStrand;
	}
	
    if( globalStrandIndex > 0 ) 
    {
        offset =  g_HairVerticesOffsetsSRV[globalStrandIndex - 1];
        strandType = g_HairStrandType.Load(globalStrandIndex);
    }

	uint globalVertexIndex = offset + localVertexIndex;
    uint numVerticesInTheStrand = g_HairVerticesOffsetsSRV[globalStrandIndex] - offset;

	if ( numVerticesInTheStrand > maxPossibleVertsInStrand )
		numVerticesInTheStrand = maxPossibleVertsInStrand;

    float4 currentPos = float4(0, 0, 0, 0); // position when this step starts. In other words, a position from the last step. 
    float4 initialPos = float4(0, 0, 0, 0); // rest position

    //------------------------------
    // Copy data into shared memory 
    //------------------------------
    if (localVertexIndex < numVerticesInTheStrand )
    {
        currentPos = sharedPos[indexForSharedMem] = g_HairVertexPositions[globalVertexIndex];
        initialPos = g_InitialHairPositions[globalVertexIndex];
        initialPos.xyz = mul(float4( initialPos.xyz, 1), g_ModelTransformForHead).xyz;
    }
        
    GroupMemoryBarrierWithGroupSync();

    //-----------
    // Integrate
    //-----------
    if ( localVertexIndex < numVerticesInTheStrand ) 
    {  
        float dampingCoeff = g_Config[strandType].damping;

        float4 oldPos = g_HairVertexPositionsPrev[globalVertexIndex];
        float4 force = float4(0, 0, 0, 0);

        if ( IsMovable(currentPos) )  
            sharedPos[indexForSharedMem] = Integrate(currentPos, oldPos, initialPos, force, globalVertexIndex, localVertexIndex, numVerticesInTheStrand, dampingCoeff); 
        else
            sharedPos[indexForSharedMem] = initialPos;
    }    

    //--------------------------------------------
    // Global shaping matching style enforcement
    //--------------------------------------------
    float stiffnessForGlobalShapeMatching = g_Config[strandType].globalStiffness;
    float globalShapeMatchingEffectiveRange = g_Config[strandType].globalStiffnessMatchingRange;
    
    if ( stiffnessForGlobalShapeMatching > 0 && globalShapeMatchingEffectiveRange )
    {
        if ( IsMovable(sharedPos[indexForSharedMem]) )  
        {
            if ( (float)localVertexIndex < globalShapeMatchingEffectiveRange * (float)numVerticesInTheStrand )
            {
                float factor = stiffnessForGlobalShapeMatching;
                float3 del = factor * (initialPos - sharedPos[indexForSharedMem]).xyz;
                sharedPos[indexForSharedMem].xyz += del;
            }
        }
    }

	//---------------------------------------
    // update global position buffers
    //---------------------------------------
    UpdateFinalVertexPositions(currentPos, sharedPos[indexForSharedMem], globalVertexIndex, localVertexIndex, numVerticesInTheStrand);
}

//--------------------------------------------------------------------------------------
// 
//	LocalShapeConstraints
//
//  Compute shader to maintain the local shape constraints.
//
// One thread computes one strand.
//
//--------------------------------------------------------------------------------------
[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void LocalShapeConstraints(uint GIndex : SV_GroupIndex,
                  uint3 GId : SV_GroupID,
                  uint3 DTid : SV_DispatchThreadID)
{
    uint globalStrandIndex = THREAD_GROUP_SIZE*GId.x;
	globalStrandIndex += GIndex;
	
    uint strandType = 0;
	
	if (globalStrandIndex > NumStrands - 1)
		return;

	uint offset = 0;

	if ( globalStrandIndex > 0 )
    {
        offset =  g_HairVerticesOffsetsSRV.Load(globalStrandIndex - 1);
        strandType = g_HairStrandType.Load(globalStrandIndex);
    }

    uint numVerticesInTheStrand = g_HairVerticesOffsetsSRV.Load(globalStrandIndex) - offset;

	// stiffness for local shape constraints
	float stiffnessForLocalShapeMatching = g_Config[strandType].localStiffness;

	// 1.0 for stiffness makes things unstable sometimes.
	if ( stiffnessForLocalShapeMatching >= 0.95f )
		stiffnessForLocalShapeMatching = 0.95f;

	//--------------------------------------------
	// Local shape constraint for bending/twisting 
	//--------------------------------------------    
	{
		float4 pos_minus_one = g_HairVertexPositions[offset];
		float4 pos = g_HairVertexPositions[offset+1];
		float4 pos_plus_one;
		uint globalVertexIndex = 0;
		float4 rotGlobal = g_GlobalRotations[offset];
	
		for ( uint localVertexIndex = 1; localVertexIndex < numVerticesInTheStrand-1; localVertexIndex++ )
		{
			globalVertexIndex = offset + localVertexIndex;
			pos_plus_one = g_HairVertexPositions[globalVertexIndex+1];

			//--------------------------------
			// Update position i and i_plus_1
			//--------------------------------
			float4 rotGlobalWorld = MultQuaternionAndQuaternion(g_ModelRotateForHead, rotGlobal); 

			float3 orgPos_i_plus_1_InLocalFrame_i = g_HairRefVecsInLocalFrame[globalVertexIndex+1];	
			float3 orgPos_i_plus_1_InGlobalFrame = MultQuaternionAndVector(rotGlobalWorld, orgPos_i_plus_1_InLocalFrame_i) + pos.xyz;

			float3 del = stiffnessForLocalShapeMatching * 0.5f * (orgPos_i_plus_1_InGlobalFrame - pos_plus_one.xyz).xyz;

			if ( IsMovable(pos) )
				pos.xyz -= del.xyz;

			if ( IsMovable(pos_plus_one) ) 
				pos_plus_one.xyz += del.xyz;
	
			//---------------------------
			// Update local/global frames
			//---------------------------
			float4 invRotGlobalWorld = InverseQuaternion(rotGlobalWorld);	
			float3 vec = normalize(pos_plus_one.xyz - pos.xyz);		
    
			float3 x_i_plus_1_frame_i = normalize(MultQuaternionAndVector(invRotGlobalWorld, vec));
			float3 e = float3(1.0f, 0, 0);
			float3 rotAxis = cross(e, x_i_plus_1_frame_i);
    
			if ( length(rotAxis) > 0.001 )
			{
				float angle_radian = acos(dot(e, x_i_plus_1_frame_i));
				rotAxis = normalize(rotAxis);

				float4 localRot = MakeQuaternion(angle_radian, rotAxis);
				rotGlobal = MultQuaternionAndQuaternion(rotGlobal, localRot);
			}	

			g_HairVertexPositions[globalVertexIndex].xyz = pos.xyz;			
			g_HairVertexPositions[globalVertexIndex+1].xyz = pos_plus_one.xyz;

			pos_minus_one = pos;
			pos = pos_plus_one;
		}	  
	}

	return;
}

//--------------------------------------------------------------------------------------
// 
//	LengthConstriantsAndWind
//
//  Compute shader to move the vertex position based on wind and maintains the lenght constraints.
//
// One thread computes one vertex.
//
//--------------------------------------------------------------------------------------
[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void LengthConstraintsAndWind(uint GIndex : SV_GroupIndex,
                  uint3 GId : SV_GroupID,
                  uint3 DTid : SV_DispatchThreadID)
{
	uint offset = 0;

	uint globalStrandIndex = 0;
	uint localVertexIndex = 0; 
	uint indexForSharedMem = GIndex;
	uint numOfStrandsPerThreadGroup = 2;
	uint maxPossibleVertsInStrand = (THREAD_GROUP_SIZE / numOfStrandsPerThreadGroup);
	uint offsetForLocalVertexIndex = 0;

	// With offsetForLocalVertexIndex, we can convert localVertexIndex into indexForSharedMem by doing below.
	// indexForSharedMem = localVertexIndex + offsetForLocalVertexIndex

	if ( GIndex < maxPossibleVertsInStrand )
	{
		globalStrandIndex = 2 * GId.x;
		localVertexIndex = GIndex;
		offsetForLocalVertexIndex = 0;
	}
	else
	{
		globalStrandIndex = 2 * GId.x + 1;
		localVertexIndex = GIndex - maxPossibleVertsInStrand;
		offsetForLocalVertexIndex = maxPossibleVertsInStrand;
	}
	
    if( globalStrandIndex > 0 ) 
    {
        offset =  g_HairVerticesOffsetsSRV.Load(globalStrandIndex - 1);
    }

	uint globalVertexIndex = offset + localVertexIndex;
    uint numVerticesInTheStrand = g_HairVerticesOffsetsSRV.Load(globalStrandIndex) - offset;

	if ( numVerticesInTheStrand > maxPossibleVertsInStrand )
		numVerticesInTheStrand = maxPossibleVertsInStrand;
				
    //------------------------------
    // Copy data into shared memory
    //------------------------------
    if (localVertexIndex < numVerticesInTheStrand )
    {
        sharedPos[indexForSharedMem] = g_HairVertexPositions[globalVertexIndex];
        sharedLength[indexForSharedMem] = g_HairRestLengthSRV[globalVertexIndex]; 
    }
        
    GroupMemoryBarrierWithGroupSync();
    
	//------------
	// Wind
	//------------
	if ( g_Wind.x != 0 || g_Wind.y != 0 || g_Wind.z != 0 )
	{  
		float4 force = float4(0, 0, 0, 0);

		float frame = g_Wind.w;

		if ( localVertexIndex >= 2 && localVertexIndex < numVerticesInTheStrand-1 )
		{
			// combining four winds.
			float a = ((float)(globalStrandIndex % 20))/20.0f;
			float3	w = a*g_Wind.xyz + (1.0f-a)*g_Wind1.xyz + a*g_Wind2.xyz + (1.0f-a)*g_Wind3.xyz;

			float3 v = sharedPos[indexForSharedMem].xyz - sharedPos[indexForSharedMem+1].xyz;
			float3 force = -cross(cross(v, w), v);
			sharedPos[indexForSharedMem].xyz += force*g_TimeStep*g_TimeStep; 				
		}
	}

	GroupMemoryBarrierWithGroupSync();

	// We do the length constraints in LocalShapeConstraints. 
	// Below code is vertex level parallel process and uses shared memory. So it is better than doing it in LocalShapeConstraints.
	// But we need one directional position update to prevent exessive stretchy problem under fast head movement. 
	//----------------------------
	// Enforce length constraints
	//----------------------------
	uint a = floor(numVerticesInTheStrand/2.0f);
	uint b = floor((numVerticesInTheStrand-1)/2.0f); 
	
	for ( uint iterationE=0; iterationE < 2; iterationE++ )
	{
		uint sharedIndex = localVertexIndex*2 + offsetForLocalVertexIndex;

		if( localVertexIndex < a )
			ApplyDistanceConstraint(sharedPos[sharedIndex], sharedPos[sharedIndex+1], sharedLength[sharedIndex].x);

		GroupMemoryBarrierWithGroupSync(); 

		if( localVertexIndex < b )
			ApplyDistanceConstraint(sharedPos[sharedIndex+1], sharedPos[sharedIndex+2], sharedLength[sharedIndex+1].x);

		GroupMemoryBarrierWithGroupSync();
	}

	//---------------------------------------
    // update global position buffers
    //---------------------------------------
	if ( localVertexIndex < numVerticesInTheStrand )
	    g_HairVertexPositions[globalVertexIndex] = sharedPos[indexForSharedMem];
	
	return;
}



//--------------------------------------------------------------------------------------
// 
//	CollisionAndTangents
//
//  Compute shader to simulate collisions and calculate the new tangent after the vertex has moved.
//
// One thread computes one vertex.
//
//--------------------------------------------------------------------------------------
[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void CollisionAndTangents(uint GIndex : SV_GroupIndex,
                  uint3 GId : SV_GroupID,
                  uint3 DTid : SV_DispatchThreadID)
{
	uint offset = 0;

	uint globalStrandIndex = 0;
	uint localVertexIndex = 0; 
	uint indexForSharedMem = GIndex;
	uint numOfStrandsPerThreadGroup = 2;
	uint maxPossibleVertsInStrand = (THREAD_GROUP_SIZE / numOfStrandsPerThreadGroup);
	
	if ( GIndex < maxPossibleVertsInStrand )
	{
		globalStrandIndex = 2 * GId.x;
		localVertexIndex = GIndex;
	}
	else
	{
		globalStrandIndex = 2 * GId.x + 1;
		localVertexIndex = GIndex - maxPossibleVertsInStrand;
	}
	
    if( globalStrandIndex > 0 ) 
    {
        offset =  g_HairVerticesOffsetsSRV.Load(globalStrandIndex - 1);
    }

	uint globalVertexIndex = offset + localVertexIndex;
    uint numVerticesInTheStrand = g_HairVerticesOffsetsSRV.Load(globalStrandIndex) - offset;

	if ( numVerticesInTheStrand > maxPossibleVertsInStrand )
		numVerticesInTheStrand = maxPossibleVertsInStrand;
		
    //------------------------------
    // Copy data into shared memory
    //------------------------------
    if (localVertexIndex < numVerticesInTheStrand )
    {
        sharedPos[indexForSharedMem] = g_HairVertexPositions[globalVertexIndex];
    }

	float4 oldPos = g_HairVertexPositionsPrev[globalVertexIndex];
        
    GroupMemoryBarrierWithGroupSync();
	
    //-------------------------------------------------
    // Collision handling hard-code collision shapes
    //-------------------------------------------------
    // if ( true )
    {
    	for (uint i = 0; i < g_ColliderCount; i++)
    	{
            float3 centerSphere = g_Colliders[i].centerPos;
            centerSphere = mul(float4( centerSphere.xyz, 1), g_ModelTransformForHead).xyz;
            float radius = g_Colliders[i].radius;

			CollisionCapsule cc;
			cc.p1.xyz = centerSphere;
			cc.p1.w = radius;
			cc.p2.xyz = centerSphere;//  + float3(0.0,1.0,0.0);
			cc.p2.w = g_Colliders[i].radius2;
			sharedPos[indexForSharedMem].xyz = CapsuleCollision(sharedPos[indexForSharedMem], oldPos, cc);
    	}
    }

    GroupMemoryBarrierWithGroupSync();
    
    //-------------------
    // Compute tangent
    //-------------------
    if ( localVertexIndex < numVerticesInTheStrand-1  ) 
    {
        float3 tangent = sharedPos[indexForSharedMem+1].xyz - sharedPos[indexForSharedMem].xyz;
        g_HairVertexTangents[globalVertexIndex].xyz = normalize(tangent);
    }
	
    //---------------------------------------
    // update global position buffers
    //---------------------------------------
	if ( localVertexIndex < numVerticesInTheStrand )
	    g_HairVertexPositions[globalVertexIndex] = sharedPos[indexForSharedMem];
	    
	return;
}